{"version":3,"sources":["serviceWorker.ts","components/usestyle.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/TodoLists/TodoList.tsx","state/todo-lists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","redux/redux-store.ts","index.tsx","components/TodoLists/TodoList.module.css","AppWithRedux.module.css","components/AddItemForm/addItemForm.module.css"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","theme","createStyles","rootPaper","width","color","backgroundColor","borderRadius","margin","rootBtn","minWidth","rootBtnDelete","rootCheckBox","padding","rootBtnGroup","textTransform","fontWeight","letterSpacing","rootInput","fontSize","borderBottom","borderBottomColor","borderColor","AddItemForm","React","memo","props","useState","newInputTitle","setNewInputTitle","error","setError","console","log","classes","styleError","display","onClickHandler","trim","add","className","s","blockNetTask","TextField","value","onChange","e","inputValue","currentTarget","onKeyPress","key","id","label","variant","Button","onClick","style","EditableSpan","editMode","setEditMode","title","setTitle","autoFocus","onBlur","editTitleTask","idTaskTitle","idTodo","editTodoTitle","onDoubleClick","TodoList","filter","activeBtn","setActiveBtn","taskForTodoList","tasks","t","isDone","task","map","styleCompletedTask","textDecoration","items","Checkbox","changeStatus","checked","inputProps","IconButton","aria-label","removeTask","Paper","headerPaper","titleContainer","removeTodoList","addTask","listTask","length","ButtonGroup","fullWidth","filterTodo","initialState","root","flexGrow","menuButton","marginRight","spacing","AppWithRedux","todoLists","useSelector","state","todoList","dispatch","useDispatch","useCallback","idTask","action","type","todoListId","removeTaskAC","addTaskAC","changeStatusAC","newTitle","changeTaskTitleAC","RemoveTodoListAC","addTodo","acton","v1","activeTask","ChangeTodoListFilterAC","topNavBar","AppBar","position","Toolbar","edge","Typography","Container","fixed","containerTodo","Grid","container","justify","tl","allTodoListTasks","item","combineReducer","combineReducers","filteredTask","copyState","newTask","stateCopy","newTodoList","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.0e4ecb8c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        rootPaper: {\r\n            width: '300px',\r\n            color: '#fff',\r\n            backgroundColor: \"rgba(13, 13, 13, 0.8)\",\r\n            borderRadius: '0',\r\n            margin: '20px',\r\n        },\r\n        rootBtn: {\r\n            color: '#fff',\r\n            backgroundColor: '#595959',\r\n            minWidth: '30px',\r\n            borderRadius: '0',\r\n            '&:hover':{\r\n                backgroundColor: '#0a00f5',\r\n            }\r\n        },\r\n        rootBtnDelete: {\r\n            color: '#595959',\r\n            '&:hover': {\r\n                backgroundColor: 'rgba(255, 255, 255, 0.5)'\r\n            }\r\n        },\r\n        rootCheckBox: {\r\n            padding: '10px',\r\n            color: '#fff',\r\n            '.Mui-checked&':{\r\n                color:'#0a00f5'\r\n            },\r\n            '&:hover':{\r\n                backgroundColor: 'rgba(10, 0, 245, 0.3)'\r\n            },\r\n            '.MuiCheckbox-colorSecondary&:hover':{\r\n                backgroundColor: 'rgba(10, 0, 245, 0.3)'\r\n            },\r\n\r\n        },\r\n        rootBtnGroup:{\r\n            borderRadius: '0',\r\n\r\n            textTransform: 'uppercase',\r\n            backgroundColor: '#595959',\r\n            '&:hover':{\r\n\r\n                backgroundColor: '#0a00f5',\r\n            },\r\n            '&.MuiButton-contained':{\r\n                color: 'black',\r\n                backgroundColor: '#0a00f5'\r\n            },\r\n            '&.MuiButton-root':{\r\n                fontWeight: 'bold',\r\n                letterSpacing: '2px',\r\n                color: '#fff'\r\n\r\n            }\r\n        },\r\n        rootInput:{\r\n            width: '70%',\r\n            '& .MuiInputBase-root':{\r\n                color: '#fff',\r\n                fontSize: '16px'\r\n            },\r\n            '& .MuiInput-underline:before': {\r\n                borderBottom: '1px solid #fff'\r\n            },\r\n            '& .MuiInput-underline:hover:before': {\r\n                borderBottom: '1px solid #595959',\r\n\r\n            },\r\n            '& .MuiInput-formControl': {\r\n                color: '#fff',\r\n\r\n            },\r\n            '& .MuiInputLabel-formControl':{\r\n                color: '#fff',\r\n                fontSize: '16px'\r\n            },\r\n            '& label.Mui-focused': {\r\n                color: '#0a00f5',\r\n            },\r\n            '& .MuiInput-underline:after': {\r\n                borderBottomColor: '#0a00f5',\r\n            },\r\n            '& .MuiOutlinedInput-root': {\r\n                '& fieldset': {\r\n                    borderColor: '#595959',\r\n                },\r\n                '&:hover fieldset': {\r\n                    borderColor: '#0a00f5',\r\n                },\r\n                '&.Mui-focused fieldset': {\r\n                    borderColor: '#0a00f5',\r\n                },\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from './addItemForm.module.css'\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport {useStyles} from \"../usestyle\";\r\n\r\n\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    add: (title: string) => void\r\n}\r\n\r\nconst AddItemForm = React.memo(\r\n     (props:AddItemFormPropsType) => {\r\n        const [newInputTitle, setNewInputTitle] = useState<string>(\"\")\r\n        const [error, setError] = useState<boolean | null>(null)\r\n\r\n        console.log(\"addItemForm\")\r\n        const classes = useStyles()\r\n\r\n        const styleError = {\r\n            color:'red',\r\n            display: error ? 'block' : 'none'\r\n        }\r\n\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            let inputValue = e.currentTarget.value\r\n            setNewInputTitle(inputValue)\r\n            if (inputValue) {\r\n                setError(false)\r\n            }\r\n        }\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if (e.key === 'Enter') {\r\n                onClickHandler()\r\n            }\r\n        }\r\n        const onClickHandler = () => {\r\n            if (newInputTitle.trim() !== '') {\r\n                props.add(newInputTitle.trim())\r\n                setNewInputTitle('')\r\n            } else {\r\n                setError(true)\r\n            }\r\n        }\r\n        return <div>\r\n            <div className={s.blockNetTask}>\r\n                <TextField value={newInputTitle} onChange={onChangeHandler} onKeyPress={onKeyPressHandler} id=\"outlined-basic\" label=\"Set a task\" variant=\"outlined\" className={classes.rootInput}/>\r\n                <Button onClick={onClickHandler} className={classes.rootBtn}>+</Button>\r\n                {/*<input type=\"text\" value={newInputTitle} onChange={onChangeHandler} onKeyPress={onKeyPressHandler}/>*/}\r\n                {/*<button onClick={onClickHandler}>+</button>*/}\r\n            </div>\r\n            <div style={styleError}>Please enter the task! </div>\r\n\r\n        </div>\r\n\r\n\r\n    }\r\n)\r\n\r\n\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropType = {\r\n    title: string\r\n    idTaskTitle: string\r\n    idTodo: string | ''\r\n    editTitleTask?:(value: string , id: string, idTodo: string) => void\r\n    editTodoTitle?:(value: string , id: string) => void\r\n}\r\n\r\n\r\n\r\nfunction EditableSpan(props:EditableSpanPropType) {\r\n    const [editMode,setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const changeTitle = (e:ChangeEvent<HTMLInputElement>) =>{\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n    const activateEditMode = () =>{\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () =>{\r\n        setEditMode(false)\r\n        props.editTitleTask && props.editTitleTask(title, props.idTaskTitle, props.idTodo)\r\n        props.editTodoTitle && props.editTodoTitle(title, props.idTodo)\r\n    }\r\n\r\n\r\n    return editMode? <input style={{backgroundColor: 'black', color: 'white'}} value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/> : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n}\r\n\r\nexport default EditableSpan","import React, {ChangeEvent, useState} from 'react';\r\nimport '../../App.css';\r\nimport s from './TodoList.module.css'\r\n\r\n\r\n\r\nimport AddItemForm from \"../AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"../EditableSpan/EditableSpan\";\r\nimport {Button, ButtonGroup, Paper} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {useStyles} from \"../usestyle\";\r\n\r\n\r\ntype TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype filterValueType = 'all' | 'active' | 'completed'\r\ntype ProtoType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TasksType>\r\n    filter: filterValueType\r\n    removeTask: (id: string, todoListId: string) => void\r\n    filterTodo: (activeTask: filterValueType, id: string) => void\r\n    addTask: (title: string, id: string) => void\r\n    changeStatus: (id: string, isDone: boolean, todoId: string) => void\r\n    removeTodoList: (id: string) => void\r\n    editTitleTask: (value: string, id: string, idTodo: string) => void\r\n    editTodoTitle: (value: string, id: string) => void\r\n}\r\n\r\n\r\n\r\nconst TodoList = React.memo((props: ProtoType) => {\r\n    const [activeBtn, setActiveBtn] = useState<filterValueType>(props.filter)\r\n    console.log('TODO-LIST')\r\n    const classes = useStyles()\r\n\r\n    let taskForTodoList = props.tasks\r\n\r\n    if (props.filter === 'completed') {\r\n        taskForTodoList = props.tasks.filter(t => t.isDone)\r\n    }\r\n    if (props.filter === 'active') {\r\n        taskForTodoList = props.tasks.filter(t => !t.isDone)\r\n    }\r\n\r\n    const task = taskForTodoList.map(t => {\r\n        const onClickHandler = () => props.removeTask(t.id, props.id)\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeStatus(t.id, e.currentTarget.checked, props.id)\r\n\r\n        }\r\n        const styleCompletedTask = {\r\n            textDecoration: t.isDone ? 'line-through' : ''\r\n\r\n        }\r\n        return <li key={t.id} style={styleCompletedTask} className={s.items}>\r\n\r\n            <Checkbox\r\n                onChange={onChangeHandler} checked={t.isDone} className={classes.rootCheckBox}  inputProps={{'aria-label': 'primary checkbox'}}\r\n            />\r\n            <EditableSpan title={t.title}\r\n                          editTitleTask={props.editTitleTask}\r\n                          idTaskTitle={t.id} idTodo={props.id}/>\r\n\r\n            <IconButton aria-label=\"delete\" className={classes.rootBtnDelete} onClick={onClickHandler}>\r\n                <DeleteIcon fontSize=\"large\" />\r\n            </IconButton>\r\n        </li>\r\n\r\n    })\r\n\r\n    const removeTodo = () => {\r\n        props.removeTodoList(props.id)\r\n    }\r\n    const onClickHandler = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const onClickAllHandler = () => {\r\n        props.filterTodo('all', props.id)\r\n        setActiveBtn('all')\r\n    }\r\n    const onClickActiveHandler = () => {\r\n        props.filterTodo('active', props.id)\r\n        setActiveBtn('active')\r\n    }\r\n    const onClickCompletedHandler = () => {\r\n        props.filterTodo('completed', props.id)\r\n        setActiveBtn('completed')\r\n    }\r\n\r\n\r\ndebugger\r\n    return (\r\n        <Paper className={classes.rootPaper}>\r\n            <div className={s.headerPaper}>\r\n                <div className={s.titleContainer}>\r\n                    <EditableSpan title={props.title} idTodo={props.id} editTitleTask={props.editTodoTitle} idTaskTitle={props.id}/>{/*<h3>{props.title}</h3>*/}\r\n                    <Button onClick={removeTodo} className={classes.rootBtn}>x</Button>\r\n                </div>\r\n                <div>\r\n                    <AddItemForm add={onClickHandler}/>\r\n                </div>\r\n            </div>\r\n            <ul className={s.listTask}>\r\n                {(taskForTodoList.length) ? task : <strong>no task</strong>}\r\n            </ul>\r\n            <div >\r\n            <ButtonGroup fullWidth={true} >\r\n                <Button className={classes.rootBtnGroup} variant={activeBtn === 'all' ? 'contained' : 'outlined'}\r\n                            onClick={onClickAllHandler}>All</Button>\r\n                <Button className={classes.rootBtnGroup} variant={activeBtn === 'active' ? 'contained' : 'outlined'}\r\n                            onClick={onClickActiveHandler}>Active</Button>\r\n                <Button className={classes.rootBtnGroup} variant={activeBtn === 'completed' ? 'contained' : 'outlined'}\r\n                            onClick={onClickCompletedHandler}>Completed</Button>\r\n            </ButtonGroup>\r\n            </div>\r\n        </Paper>\r\n    )\r\n})\r\n\r\nexport default TodoList;","import {v1} from \"uuid\";\r\n\r\ntype FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState:Array<TodoListType> = []\r\n\r\nexport const todoListsReducer = (state: Array<TodoListType> = initialState, action: ActionType):Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(t => t.id !== action.id);\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const newTodoList:TodoListType = {id: action.todoListId, title: action.title, filter: \"all\"}\r\n            return [\r\n                ...state,\r\n                newTodoList\r\n            ]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(t => {\r\n                if (t.id === action.id) {\r\n                    t.title = action.title\r\n                }\r\n                return t\r\n            })\r\n\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(t => {\r\n                if (t.id === action.id) {\r\n                    t.filter = action.filter\r\n                }\r\n                return t\r\n\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const RemoveTodoListAC = (todoListId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todoListId}\r\n}\r\nexport const AddTodoListAC = (newTodoListTitle: string): AddTodolistActionType => {\r\n    return {type: \"ADD-TODOLIST\", title: newTodoListTitle, todoListId: v1()}\r\n}\r\nexport const ChangeTodoListTitleAC = (id: string , title: string): ChangeTodolistTitleActionType =>{\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id, title}\r\n}\r\nexport const ChangeTodoListFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType =>{\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id, filter}\r\n}\r\n\r\n","import {AddTodolistActionType} from \"./todo-lists-reducer\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type removeTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    idTask: string\r\n    todoListId: string\r\n}\r\nexport type addTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type changeStatusType = {\r\n    type: 'CHANGE-STATUS'\r\n    idTask: string\r\n    isDone: boolean\r\n    todoListId: string\r\n}\r\nexport type changeTaskTitleType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    idTask: string\r\n    newTitle: string\r\n    todoListId: string\r\n}\r\nexport type removeTodoListType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    todoListId: string\r\n}\r\n\r\ntype ActionType =\r\n    | removeTaskActionType\r\n    | addTaskActionType\r\n    | changeStatusType\r\n    | changeTaskTitleType\r\n    | AddTodolistActionType\r\n    | removeTodoListType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const filteredTask = state[action.todoListId].filter(t => t.id !== action.idTask)\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: filteredTask\r\n            }\r\n        }\r\n        case 'ADD-TASK': {\r\n            const copyState = {...state}\r\n            const newTask = {id: v1(), title: action.title, isDone: false}\r\n            const todoList = state[action.todoListId]\r\n\r\n            copyState[action.todoListId] = [newTask, ...todoList]\r\n            return copyState\r\n        }\r\n        case 'CHANGE-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => {\r\n                    if (t.id === action.idTask) {\r\n                        return {...t, isDone: action.isDone}\r\n                    }\r\n                    return t\r\n                })\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t =>\r\n                    (t.id === action.idTask)\r\n                    ? {...t, title: action.newTitle}\r\n                    : t)\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const copyState = {...state}\r\n            copyState[action.todoListId] = []\r\n\r\n            return copyState\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todoListId]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (idTask: string, idTodo: string): removeTaskActionType => {\r\n    return {type: 'REMOVE-TASK', idTask, todoListId: idTodo}\r\n}\r\nexport const addTaskAC = (title: string, todoListId: string): addTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todoListId}\r\n}\r\nexport const changeStatusAC = (idTask: string, isDone: boolean, todoListId: string): changeStatusType => {\r\n    return {type: \"CHANGE-STATUS\", idTask, isDone, todoListId}\r\n}\r\nexport const changeTaskTitleAC = (newTitle: string, idTask: string, todoListId: string): changeTaskTitleType => {\r\n    return {type: 'CHANGE-TASK-TITLE', idTask, newTitle, todoListId}\r\n}\r\nexport const RemoveTodoListAC = (todoListId: string): removeTodoListType => {\r\n    return {type: 'REMOVE-TODOLIST', todoListId}\r\n}\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\n\r\nimport s from './AppWithRedux.module.css'\r\nimport TodoList from \"./components/TodoLists/TodoList\";\r\nimport AddItemForm from \"./components/AddItemForm/AddItemForm\";\r\n\r\nimport {AppBar, Button, Container, createStyles, Grid, Theme, Toolbar, Typography} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\n\r\nimport {\r\n    AddTodoListAC,\r\n    ChangeTodoListFilterAC,\r\n    ChangeTodoListTitleAC,\r\n    RemoveTodoListAC\r\n} from \"./state/todo-lists-reducer\";\r\nimport {addTaskAC, changeStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nexport type todoListType = {\r\n    id: string\r\n    title: string\r\n    filter: filterValueType\r\n}\r\nexport type tasksStateType = {\r\n    [id: string]: Array<TasksType>\r\n}\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type filterValueType = 'all' | 'active' | 'completed'\r\n\r\ntype AppRootStateType = {\r\n    tasks: tasksStateType\r\n    todoList: Array<todoListType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    const todoLists = useSelector<AppRootStateType, Array<todoListType>>(state => state.todoList)\r\n    const tasks = useSelector<AppRootStateType, tasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((idTask: string, idTodo: string) => {\r\n        const action = removeTaskAC(idTask, idTodo)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, idTodo: string) => {\r\n        const action = addTaskAC(title, idTodo)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((idTask: string, isDone: boolean, todoListId: string) => {\r\n        const action = changeStatusAC(idTask, isDone, todoListId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const editTitleTask = useCallback((idTask: string, newTitle: string, todoListId: string) => {\r\n        const action = changeTaskTitleAC(idTask, newTitle, todoListId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const removeTodoList = useCallback((todoListId: string) => {\r\n        const action = RemoveTodoListAC(todoListId)\r\n        dispatch(action)\r\n\r\n    }, [dispatch])\r\n    const addTodo = useCallback((title: string) => {\r\n        const acton = AddTodoListAC(title)\r\n        dispatch(acton)\r\n    }, [dispatch])\r\n    const filterTodo = useCallback((activeTask: filterValueType, id: string) => {\r\n        const action = ChangeTodoListFilterAC(id, activeTask)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const editTodoTitle = useCallback((newTitle: string, todoListId: string) => {\r\n        const action = ChangeTodoListTitleAC(todoListId, newTitle)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const classes = useStyles()\r\n    console.log('APP')\r\n    return (\r\n        <>\r\n            <div className={s.topNavBar}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            News\r\n                        </Typography>\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n            <Container fixed className={s.containerTodo}>\r\n                <Grid container justify=\"center\"  >\r\n                    <AddItemForm add={addTodo}/>\r\n                </Grid>\r\n                <Grid container spacing={1} justify=\"space-around\" >\r\n                    {\r\n                        todoLists.map(tl => {\r\n                            let allTodoListTasks = tasks[tl.id]\r\n                            return <Grid item key={tl.id}>\r\n                                <TodoList\r\n                                    id={tl.id}\r\n                                    key={tl.id}\r\n                                    title={tl.title}\r\n                                    addTask={addTask}\r\n                                    filter={tl.filter}\r\n                                    removeTask={removeTask}\r\n                                    filterTodo={filterTodo}\r\n                                    tasks={allTodoListTasks}\r\n                                    changeStatus={changeStatus}\r\n                                    editTitleTask={editTitleTask}\r\n                                    editTodoTitle={editTodoTitle}\r\n                                    removeTodoList={removeTodoList}\r\n                                />\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n\r\n\r\n","import {createStore, combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"../state/tasks-reducer\";\r\nimport {todoListsReducer} from \"../state/todo-lists-reducer\";\r\n\r\nconst combineReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoList: todoListsReducer\r\n})\r\n\r\n//@ts-ignore\r\nexport const store = createStore(combineReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {store} from \"./redux/redux-store\"\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerPaper\":\"TodoList_headerPaper__3n7kF\",\"titleContainer\":\"TodoList_titleContainer__2xUaK\",\"listTask\":\"TodoList_listTask__HFzED\",\"items\":\"TodoList_items__27l5V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topNavBar\":\"AppWithRedux_topNavBar__24aDh\",\"containerTodo\":\"AppWithRedux_containerTodo__EEvC_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockNetTask\":\"addItemForm_blockNetTask__3lwFf\"};"],"sourceRoot":""}