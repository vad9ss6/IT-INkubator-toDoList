{"version":3,"sources":["serviceWorker.ts","components/usestyle.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","api/todolist-api.ts","components/TodoLists/Task/Task.tsx","state/tasks-reducer.ts","components/TodoLists/TodoList.tsx","state/todo-lists-reducer.ts","AppWithRedux.tsx","redux/redux-store.ts","index.tsx","components/TodoLists/TodoList.module.css","AppWithRedux.module.css","components/AddItemForm/addItemForm.module.css"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","theme","createStyles","rootPaper","width","color","backgroundColor","borderRadius","margin","rootBtn","marginBottom","closeBtn","padding","minWidth","rootBtnDelete","rootCheckBox","rootBtnGroup","fontWeight","rootInput","fontSize","borderBottom","borderBottomColor","borderColor","AddItemForm","React","memo","props","useState","newInputTitle","setNewInputTitle","error","setError","styleError","display","onClickHandler","trim","add","classes","className","s","blockNetTask","TextField","value","label","titleForm","onKeyPress","e","key","onChange","inputValue","currentTarget","Button","onClick","style","EditableSpan","TaskStatuses","TaskPriorities","editMode","setEditMode","title","setTitle","activateEditMode","autoFocus","onBlur","editTitleTask","idTodo","idTaskTitle","editTodoTitle","onDoubleClick","onTouchEnd","paddingLeft","instance","axios","create","baseURL","withCredentials","headers","todoListAPI","get","post","todoListId","delete","todolistId","put","todoListTaskAPI","taskId","model","Task","id","status","styleCompletedTask","textDecoration","Completed","items","Checkbox","changeStatus","checked","New","inputProps","IconButton","aria-label","removeTask","initialState","TodoList","removeTodoList","addTask","filterTodo","dispatch","useDispatch","useEffect","todoId","then","res","data","type","filter","activeBtn","setActiveBtn","taskForTodoList","tasks","t","removeTodo","useCallback","onClickAllHandler","onClickActiveHandler","onClickCompletedHandler","Paper","headerPaper","titleContainer","titleBtn","listTask","map","ButtonGroup","fullWidth","variant","root","flexGrow","menuButton","marginRight","spacing","AppWithRedux","todoLists","catch","rej","useSelector","state","todoList","idTask","action","task","item","addTaskTC","getState","find","deadline","description","priority","startDate","changeStatusAC","console","warn","changeStatusTC","newTitle","changeTaskTitleAC","changeTaskTitleTC","RemoveTodoListAC","deleteTodoListTC","addTodo","resultCode","addTodoListTC","activeTask","ChangeTodoListFilterAC","ChangeTodoListTitleAC","topNavBar","AppBar","position","Toolbar","edge","Typography","Container","fixed","containerTodo","Grid","container","justify","tl","allTodoListTasks","combineReducer","combineReducers","stateCopy","forEach","filteredTask","copyState","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.00416c5c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        rootPaper: {\r\n            width: '350px',\r\n            color: '#fff',\r\n            backgroundColor: \"rgba(13, 13, 13, 0.8)\",\r\n            borderRadius: '5px',\r\n            margin: '20px',\r\n        },\r\n        rootBtn: {\r\n            color: '#ffffff',\r\n            backgroundColor: '#AFB1B3',\r\n            borderRadius: '0 5px 5px 0',\r\n            marginBottom: '-12px',\r\n            '&:hover':{\r\n                backgroundColor: '#3F51B5',\r\n            }\r\n        },\r\n        closeBtn:{\r\n            color: '#ffffff',\r\n            padding: '0',\r\n            '&:hover':{\r\n                backgroundColor: 'transparent',\r\n                color: '#d4001b',\r\n            },\r\n            '&.MuiButton-root':{\r\n                minWidth: '10px',\r\n\r\n            }\r\n        },\r\n        rootBtnDelete: {\r\n            color: '#ffffff',\r\n            '&.MuiIconButton-root':{\r\n                color: '#afb1b3'\r\n            },\r\n            '&.MuiIconButton-root:hover': {\r\n                backgroundColor: 'rgb(15,28,81)'\r\n            }\r\n        },\r\n        rootCheckBox: {\r\n            '.MuiCheckbox-root&': {\r\n                padding: '10px',\r\n                color: '#fff',\r\n            },\r\n            '.Mui-checked&':{\r\n                color:'#0a00f5'\r\n            },\r\n            '&:hover':{\r\n                backgroundColor: 'rgba(10, 0, 245, 0.3)'\r\n            },\r\n            '.MuiCheckbox-colorSecondary&:hover':{\r\n                backgroundColor: 'rgba(10, 0, 245, 0.3)'\r\n            },\r\n\r\n        },\r\n        rootBtnGroup:{\r\n            '&.MuiButton-outlinedPrimary':{\r\n                fontWeight: 'bold',\r\n                color: '#fff'\r\n            }\r\n        },\r\n        rootInput:{\r\n            '& .MuiInputBase-root':{\r\n                color: '#fff',\r\n                fontSize: '16px'\r\n            },\r\n            '& .MuiInput-underline:before': {\r\n                borderBottom: '1px solid #fff'\r\n            },\r\n            '& .MuiInput-underline:hover:before': {\r\n                borderBottom: '1px solid #595959',\r\n\r\n            },\r\n            '& .MuiInput-formControl': {\r\n                color: '#fff',\r\n\r\n            },\r\n            '& .MuiInputLabel-formControl':{\r\n                color: '#fff',\r\n                fontSize: '16px'\r\n            },\r\n            '& label.Mui-focused': {\r\n                color: '#0a00f5',\r\n            },\r\n            '& .MuiInput-underline:after': {\r\n                borderBottomColor: '#0a00f5',\r\n            },\r\n            '& .MuiOutlinedInput-root': {\r\n                '& fieldset': {\r\n                    borderColor: '#595959',\r\n                },\r\n                '&:hover fieldset': {\r\n                    borderColor: '#0a00f5',\r\n                },\r\n                '&.Mui-focused fieldset': {\r\n                    borderColor: '#0a00f5',\r\n                },\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\nimport s from './addItemForm.module.css'\r\n\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport {useStyles} from \"../usestyle\";\r\n\r\ntype AddItemFormPropsType = {\r\n    titleForm: string\r\n    add: (title: string) => void\r\n}\r\nconst AddItemForm = React.memo(\r\n    (props: AddItemFormPropsType) => {\r\n        const [newInputTitle, setNewInputTitle] = useState<string>(\"\")\r\n        const [error, setError] = useState<boolean>(false)\r\n\r\n        const styleError = {\r\n            color: 'red',\r\n            display: error ? 'block' : 'none'\r\n        }\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            let inputValue = e.currentTarget.value\r\n            setNewInputTitle(inputValue)\r\n            if (inputValue) {\r\n                setError(false)\r\n            }\r\n        }\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if (e.key === 'Enter') {\r\n                onClickHandler()\r\n            }\r\n        }\r\n        const onClickHandler = () => {\r\n            if (newInputTitle.trim() !== '') {\r\n                props.add(newInputTitle.trim())\r\n                setNewInputTitle('')\r\n            } else {\r\n                setError(true)\r\n            }\r\n        }\r\n\r\n        const classes = useStyles()\r\n        return <div>\r\n            <div className={s.blockNetTask}>\r\n                <TextField\r\n                    error={error}\r\n                    value={newInputTitle}\r\n                    label={props.titleForm}\r\n                    className={classes.rootInput}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    onChange={onChangeHandler}\r\n                />\r\n                <Button onClick={onClickHandler} className={classes.rootBtn}>Add</Button>\r\n            </div>\r\n            <div style={styleError}>Please enter the task!</div>\r\n        </div>\r\n\r\n\r\n    }\r\n)\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\r\n\r\n\r\ntype EditableSpanPropType = {\r\n    title: string\r\n    idTaskTitle: string\r\n    idTodo: string | ''\r\n    editTitleTask?:(value: string , id: string, idTodo: string) => void\r\n    editTodoTitle?:(value: string , id: string) => void\r\n}\r\n\r\n\r\n\r\nfunction EditableSpan(props:EditableSpanPropType) {\r\n    const [editMode,setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const changeTitle = (e:ChangeEvent<HTMLInputElement>) =>{\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n    const activateEditMode = () =>{\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () =>{\r\n        setEditMode(false)\r\n        props.editTitleTask && props.editTitleTask(props.idTodo, props.idTaskTitle, title )\r\n        props.editTodoTitle && props.editTodoTitle(title, props.idTodo)\r\n    }\r\n\r\n\r\n    return editMode\r\n        ? <input\r\n            style={{backgroundColor: 'black', color: 'white', width: '70%',}}\r\n            value={title} onChange={changeTitle}\r\n            autoFocus\r\n            onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode} onTouchEnd={activateEditMode} style={{paddingLeft: '5px'}}>{props.title}</span>\r\n}\r\n\r\nexport default EditableSpan","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers:{\r\n        'api-key': '6fc83ead-7a8f-46b1-893b-8465afa55caf'\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n    message: string\r\n}\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport const todoListAPI = {\r\n    getTodoList(){\r\n       return  instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    postTodoList(title: string){\r\n       return instance.post<ResponseType<{item: TodolistType}>>('/todo-lists', {title: `${title}`})\r\n    },\r\n    deleteTodoList(todoListId: string){\r\n       return instance.delete<ResponseType>(`/todo-lists/${todoListId}`)\r\n    },\r\n    updateTodoList(todolistId: string, title: string){\r\n        return instance.put<ResponseType<{item: TodolistType}>>(`/todo-lists/${todolistId}`, {title: `${title}`})\r\n    }\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport const todoListTaskAPI = {\r\n    getTask(todoListId: string){\r\n        return instance.get(`/todo-lists/${todoListId}/tasks`)\r\n    },\r\n    postTask(todoListId: string, title: string){\r\n        return instance.post(`/todo-lists/${todoListId}/tasks`, {title: `${title}`})\r\n    },\r\n    deleteTask(todolistId: string,taskId: string){\r\n        return instance.delete(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string,taskId: string, model: UpdateTaskModelType){\r\n        return instance.put(`/todo-lists/${todolistId}/tasks/${taskId}`, {...model})\r\n    }\r\n}\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from \"../TodoList.module.css\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport EditableSpan from \"../../EditableSpan/EditableSpan\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {useStyles} from \"../../usestyle\";\r\nimport {TaskStatuses} from \"../../../api/todolist-api\";\r\n\r\n\r\ntype PropType = {\r\n    id: string\r\n    title: string\r\n    status: TaskStatuses\r\n    idTodo: string\r\n    editTitleTask: (value: string, id: string, idTodo: string) => void\r\n    changeStatus: (id: string, status: TaskStatuses, todoId: string) => void\r\n    removeTask: (id: string, todoListId: string) => void\r\n}\r\n\r\nexport const Task:React.FC<PropType> = ({id, title, status, idTodo, ...props}) => {\r\n    const classes = useStyles()\r\n    const onClickHandler = () => props.removeTask(id, idTodo)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStatus(id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, idTodo)\r\n    }\r\n    const styleCompletedTask = {\r\n        textDecoration: status === TaskStatuses.Completed ? 'line-through' : ''\r\n\r\n    }\r\n\r\n    return  <li key={id} style={styleCompletedTask} className={s.items}>\r\n        <div>\r\n            <Checkbox\r\n                onChange={onChangeHandler} checked={status === TaskStatuses.Completed} className={classes.rootCheckBox}  inputProps={{'aria-label': 'primary checkbox'}}\r\n            />\r\n            <EditableSpan title={title}\r\n                          editTitleTask={props.editTitleTask}\r\n                          idTaskTitle={id} idTodo={idTodo} />\r\n        </div>\r\n        <IconButton aria-label=\"delete\" className={classes.rootBtnDelete} onClick={onClickHandler}>\r\n            <DeleteIcon fontSize=\"large\" />\r\n        </IconButton>\r\n    </li>\r\n}","import {AddTodolistActionType, RemoveTodolistActionType, SetTodoListsActionType} from \"./todo-lists-reducer\";\r\nimport {TaskStatuses, TaskType, todoListTaskAPI, UpdateTaskModelType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {IGlobalState} from \"../redux/redux-store\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type removeTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    idTask: string\r\n    todoListId: string\r\n}\r\nexport type addTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    task: TaskType\r\n}\r\nexport type changeStatusType = {\r\n    type: 'CHANGE-STATUS'\r\n    idTask: string\r\n    status: TaskStatuses\r\n    todoListId: string\r\n}\r\nexport type changeTaskTitleType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    todoListId: string\r\n    taskId: string\r\n    title: string\r\n}\r\nexport type setTasksType = {\r\n    type: 'SET-TASKS',\r\n    todoListId: string\r\n    items: Array<TaskType>\r\n}\r\n\r\ntype ActionType =\r\n    | removeTaskActionType\r\n    | addTaskActionType\r\n    | changeStatusType\r\n    | changeTaskTitleType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodoListsActionType\r\n    | setTasksType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TODO-LISTS': {\r\n            const stateCopy = {...state}\r\n            action.todoLists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            const filteredTask = state[action.todoListId].filter(t => t.id !== action.idTask)\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: filteredTask\r\n            }\r\n        }\r\n        case 'ADD-TASK': {\r\n            const copyState = {...state}\r\n            const todoList = state[action.task.todoListId]\r\n            copyState[action.task.todoListId] = [action.task, ...todoList]\r\n            return copyState\r\n        }\r\n        case 'CHANGE-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => {\r\n                    if (t.id === action.idTask) {\r\n                        return {...t, status: action.status}\r\n                    }\r\n                    return t\r\n                })\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t =>\r\n                    (t.id === action.taskId)\r\n                        ? {...t, title: action.title}\r\n                        : t)\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const copyState = {...state}\r\n            copyState[action.todoList.id] = []\r\n\r\n            return copyState\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case 'SET-TASKS': {\r\n            let copyState = {...state}\r\n            copyState[action.todoListId] = action.items\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (idTask: string, idTodo: string): removeTaskActionType => {\r\n    return {type: 'REMOVE-TASK', idTask, todoListId: idTodo}\r\n}\r\nexport const addTaskAC = (task: TaskType): addTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const changeStatusAC = (idTask: string, status: TaskStatuses, todoListId: string): changeStatusType => {\r\n    return {type: \"CHANGE-STATUS\", idTask, status, todoListId}\r\n}\r\nexport const changeTaskTitleAC = (todoListId: string, taskId: string, title: string): changeTaskTitleType => {\r\n    return {type: 'CHANGE-TASK-TITLE',todoListId, taskId, title }\r\n}\r\nexport const setTasksAC = (todoListId: string, items: Array<TaskType>): setTasksType => {\r\n    return {type: 'SET-TASKS', todoListId, items}\r\n}\r\n\r\n\r\nexport const fetchTasksTC = (todoId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListTaskAPI.getTask(todoId)\r\n            .then(res => {\r\n                dispatch(setTasksAC(todoId, res.data.items))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (todoListId: string, taskId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListTaskAPI.deleteTask(todoListId, taskId).then(() => {\r\n            const action = removeTaskAC(taskId, todoListId)\r\n            dispatch(action)\r\n        })\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (todoListId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListTaskAPI.postTask(todoListId, title)\r\n            .then(res => {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTaskTitleTC = (todoListId: string, taskId: string, title: string) => {\r\n    debugger\r\n    return (dispatch: Dispatch, getState: () => IGlobalState) => {\r\n        const state = getState()\r\n        const task = state.tasks[todoListId].find(task => task.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const model: UpdateTaskModelType = {\r\n            title: title,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            status: task.status,\r\n            startDate: task.startDate\r\n        }\r\n\r\n        todoListTaskAPI.updateTask(todoListId, taskId, model)\r\n            .then(() => {\r\n                dispatch(changeTaskTitleAC(todoListId, taskId, title))\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeStatusTC = (idTask: string, status: TaskStatuses, todoListId: string) => {\r\n    debugger\r\n    return (dispatch: Dispatch, getState: () => IGlobalState) => {\r\n        const state = getState()\r\n        const task = state.tasks[todoListId].find(task => task.id === idTask)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const model: UpdateTaskModelType = {\r\n            title: task.title,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            status: status,\r\n            startDate: task.startDate\r\n        }\r\n\r\n        todoListTaskAPI.updateTask(todoListId, idTask, model)\r\n            .then(() => {\r\n                dispatch(changeStatusAC(idTask, status, todoListId))\r\n            })\r\n    }\r\n}\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport '../../App.css';\r\nimport s from './TodoList.module.css'\r\n\r\nimport AddItemForm from \"../AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"../EditableSpan/EditableSpan\";\r\nimport {Button, ButtonGroup, Paper} from \"@material-ui/core\";\r\n\r\nimport {useStyles} from \"../usestyle\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {FilterValuesType} from \"../../state/todo-lists-reducer\";\r\nimport {TaskStatuses, TaskType} from '../../api/todolist-api';\r\nimport {fetchTasksTC} from \"../../state/tasks-reducer\";\r\n\r\n\r\ntype ProtoType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (id: string, todoListId: string) => void\r\n    filterTodo: (activeTask: FilterValuesType, id: string) => void\r\n    addTask: (title: string, id: string) => void\r\n    changeStatus: (id: string, status: TaskStatuses, todoId: string) => void\r\n    removeTodoList: (id: string) => void\r\n    editTitleTask: (value: string, id: string, idTodo: string) => void\r\n    editTodoTitle: (value: string, id: string) => void\r\n}\r\n\r\n\r\n\r\nconst TodoList = React.memo<ProtoType>(({removeTodoList, id, addTask, filterTodo, ...props}) => {\r\n    let dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(id))\r\n    },[])\r\n    const [activeBtn, setActiveBtn] = useState<FilterValuesType>(props.filter)\r\n\r\n    let taskForTodoList = props.tasks\r\n\r\n    if (props.filter === 'completed') {\r\n        taskForTodoList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    if (props.filter === 'active') {\r\n        taskForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    const classes = useStyles()\r\n    // const task = taskForTodoList.map(t => {\r\n    //     const onClickHandler = () => props.removeTask(t.id, id)\r\n    //     const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    //         props.changeStatus(t.id, e.currentTarget.checked, id)\r\n    //\r\n    //     }\r\n    //     const styleCompletedTask = {\r\n    //         textDecoration: t.isDone ? 'line-through' : ''\r\n    //\r\n    //     }\r\n    //     return <li key={t.id} style={styleCompletedTask} className={s.items}>\r\n    //         <div>\r\n    //             <Checkbox\r\n    //                 onChange={onChangeHandler} checked={t.isDone} className={classes.rootCheckBox}  inputProps={{'aria-label': 'primary checkbox'}}\r\n    //             />\r\n    //             <EditableSpan title={t.title}\r\n    //                           editTitleTask={props.editTitleTask}\r\n    //                           idTaskTitle={t.id} idTodo={id} />\r\n    //         </div>\r\n    //         <IconButton aria-label=\"delete\" className={classes.rootBtnDelete} onClick={onClickHandler}>\r\n    //             <DeleteIcon fontSize=\"large\" />\r\n    //         </IconButton>\r\n    //     </li>\r\n    //\r\n    // })\r\n\r\n    const removeTodo = useCallback(() => {\r\n        removeTodoList(id)\r\n    }, [removeTodoList, id])\r\n    const onClickHandler = useCallback((title: string) => {\r\n        addTask(title, id)\r\n    }, [addTask, id])\r\n    const onClickAllHandler = useCallback(() => {\r\n        filterTodo('all', id)\r\n        setActiveBtn('all')\r\n    }, [filterTodo, id])\r\n    const onClickActiveHandler = useCallback(() => {\r\n        filterTodo('active', id)\r\n        setActiveBtn('active')\r\n    }, [filterTodo, id])\r\n    const onClickCompletedHandler = useCallback(() => {\r\n        filterTodo('completed', id)\r\n        setActiveBtn('completed')\r\n    }, [filterTodo, id])\r\n\r\n    return (\r\n        <Paper className={classes.rootPaper}>\r\n            <div className={s.headerPaper}>\r\n                <div className={s.titleContainer}>\r\n                    <EditableSpan title={props.title} idTodo={id} editTodoTitle={props.editTodoTitle} idTaskTitle={id}/>\r\n                    <div className={s.titleBtn}>\r\n                        <Button onClick={removeTodo} className={classes.closeBtn}>x</Button>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <AddItemForm add={onClickHandler} titleForm={'Set a task'}/>\r\n                </div>\r\n            </div>\r\n            <ul className={s.listTask}>\r\n                {/*{(taskForTodoList.length) ? task : <strong>no task</strong>}*/}\r\n                {taskForTodoList.map(t => <Task id={t.id}\r\n                                                key={t.id}\r\n                                                title={t.title}\r\n                                                status={t.status}\r\n                                                idTodo={id}\r\n                                                changeStatus={props.changeStatus}\r\n                                                removeTask={props.removeTask}\r\n                                                editTitleTask={props.editTitleTask}/>\r\n                )}\r\n\r\n            </ul>\r\n            <div>\r\n                <ButtonGroup  fullWidth={true} variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\" >\r\n                    <Button className={classes.rootBtnGroup} variant={activeBtn === 'all' ? 'contained' : 'outlined'}\r\n                            onClick={onClickAllHandler}>All</Button>\r\n                    <Button className={classes.rootBtnGroup} variant={activeBtn === 'active' ? 'contained' : 'outlined'}\r\n                            onClick={onClickActiveHandler}>Active</Button>\r\n                    <Button className={classes.rootBtnGroup}\r\n                            variant={activeBtn === 'completed' ? 'contained' : 'outlined'}\r\n                            onClick={onClickCompletedHandler}>Completed</Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </Paper>\r\n    )\r\n})\r\n\r\nexport default TodoList;","import {todoListAPI, TodolistType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type SetTodoListsActionType = {\r\n    type: 'SET-TODO-LISTS',\r\n    todoLists: Array<TodolistType>\r\n}\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    todoList: TodolistType\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodoListsActionType\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodoListDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todoListsReducer = (state: Array<TodoListDomainType> = initialState, action: ActionType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODO-LISTS': {\r\n            return action.todoLists.map(tl => ({\r\n                ...tl,\r\n                filter: \"all\"\r\n            }))\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(t => t.id !== action.id);\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            // const newTodoList: TodoListDomainType = {id: action.todoListId, title: action.title, filter: \"all\", addedDate: '', order: 0}\r\n            return [\r\n                {...action.todoList, filter: 'all'},\r\n                ...state\r\n            ]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(t => {\r\n                if (t.id === action.todolistId) {\r\n                    t.title = action.title\r\n                }\r\n                return t\r\n            })\r\n\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(t => {\r\n                if (t.id === action.id) {\r\n                    t.filter = action.filter\r\n                }\r\n                return t\r\n\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetTodoListsAC = (todoLists: Array<TodolistType>): SetTodoListsActionType => {\r\n    return {type: \"SET-TODO-LISTS\", todoLists}\r\n}\r\n\r\nexport const RemoveTodoListAC = (todoListId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todoListId}\r\n}\r\nexport const AddTodoListAC = (todoList: TodolistType): AddTodolistActionType => {\r\n    return {type: \"ADD-TODOLIST\", todoList}\r\n}\r\nexport const ChangeTodoListTitleAC = (todolistId: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', todolistId, title}\r\n}\r\nexport const ChangeTodoListFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id, filter}\r\n}\r\n\r\n\r\nexport const fetchTodoListsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListAPI.getTodoList()\r\n            .then((res) => {\r\n                dispatch(SetTodoListsAC(res.data))\r\n            })\r\n            .catch(rej => rej)\r\n    }\r\n}\r\n\r\nexport const deleteTodoListTC = (todoListId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListAPI.deleteTodoList(todoListId)\r\n            .then(() => {\r\n                dispatch(RemoveTodoListAC(todoListId))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListAPI.postTodoList(title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) dispatch(AddTodoListAC(res.data.data.item))\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTodoListTitleTC = (todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListAPI.updateTodoList(todolistId, title)\r\n            .then(() => {\r\n                dispatch(ChangeTodoListTitleAC(todolistId, title))\r\n            })\r\n    }\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport s from './AppWithRedux.module.css'\r\nimport TodoList from \"./components/TodoLists/TodoList\";\r\nimport AddItemForm from \"./components/AddItemForm/AddItemForm\";\r\nimport {AppBar, Button, Container, createStyles, Grid, Theme, Toolbar, Typography} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {\r\n    addTodoListTC,\r\n    ChangeTodoListFilterAC,\r\n    changeTodoListTitleTC, deleteTodoListTC, fetchTodoListsTC, FilterValuesType,\r\n    TodoListDomainType\r\n} from \"./state/todo-lists-reducer\";\r\nimport {\r\n    addTaskTC,\r\n    removeTaskTC,\r\n    TasksStateType,\r\n    changeTaskTitleTC, changeStatusTC\r\n} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TaskStatuses} from './api/todolist-api';\r\nimport {IGlobalState} from \"./redux/redux-store\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles(\r\n    {\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    })\r\n);\r\n\r\n\r\nfunction AppWithRedux() {\r\n    useEffect(() => {\r\n        dispatch(fetchTodoListsTC())\r\n    }, [])\r\n\r\n    const todoLists = useSelector<IGlobalState, Array<TodoListDomainType>>(state => state.todoList)\r\n    const tasks = useSelector<IGlobalState, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((idTask: string, idTodo: string) => {\r\n        dispatch(removeTaskTC(idTodo, idTask))\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, idTodo: string) => {\r\n        dispatch(addTaskTC(idTodo, title))\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((idTask: string, status: TaskStatuses, todoListId: string) => {\r\n        dispatch(changeStatusTC(idTask, status, todoListId))\r\n    }, [dispatch])\r\n    const editTitleTask = useCallback((todoListId: string, idTask: string, newTitle: string) => {\r\n        dispatch(changeTaskTitleTC(todoListId, idTask, newTitle))\r\n    }, [dispatch])\r\n    const removeTodoList = useCallback((todoListId: string) => {\r\n        dispatch(deleteTodoListTC(todoListId))\r\n    }, [dispatch])\r\n    const addTodo = useCallback((title: string) => {\r\n        dispatch(addTodoListTC(title))\r\n    }, [dispatch])\r\n    const filterTodo = useCallback((activeTask: FilterValuesType, id: string) => {\r\n        const action = ChangeTodoListFilterAC(id, activeTask)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const editTodoTitle = useCallback((newTitle: string, todoListId: string) => {\r\n       dispatch(changeTodoListTitleTC(todoListId, newTitle))\r\n    }, [dispatch])\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <>\r\n            <div className={s.topNavBar}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            News\r\n                        </Typography>\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n            <Container fixed className={s.containerTodo}>\r\n                <Grid container justify=\"center\">\r\n                    <AddItemForm add={addTodo} titleForm={'Add Todo list'}/>\r\n                </Grid>\r\n                <Grid container spacing={1} justify=\"space-around\">\r\n                    {\r\n                        todoLists.map(tl => {\r\n                            let allTodoListTasks = tasks[tl.id]\r\n                            return <Grid item key={tl.id}>\r\n                                <TodoList\r\n                                    id={tl.id}\r\n                                    key={tl.id}\r\n                                    title={tl.title}\r\n                                    addTask={addTask}\r\n                                    filter={tl.filter}\r\n                                    removeTask={removeTask}\r\n                                    filterTodo={filterTodo}\r\n                                    tasks={allTodoListTasks}\r\n                                    changeStatus={changeStatus}\r\n                                    editTitleTask={editTitleTask}\r\n                                    editTodoTitle={editTodoTitle}\r\n                                    removeTodoList={removeTodoList}\r\n                                />\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n\r\n\r\n","import {createStore, combineReducers, applyMiddleware} from \"redux\";\r\nimport {tasksReducer} from \"../state/tasks-reducer\";\r\nimport {todoListsReducer} from \"../state/todo-lists-reducer\";\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n\r\n\r\nconst combineReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoList: todoListsReducer\r\n})\r\n\r\nexport type IGlobalState = ReturnType<typeof combineReducer>;\r\n\r\n\r\nexport const store = createStore(combineReducer,  composeWithDevTools(applyMiddleware(thunk)))\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {store} from \"./redux/redux-store\"\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerPaper\":\"TodoList_headerPaper__3n7kF\",\"titleContainer\":\"TodoList_titleContainer__2xUaK\",\"titleBtn\":\"TodoList_titleBtn__2EK1K\",\"listTask\":\"TodoList_listTask__HFzED\",\"items\":\"TodoList_items__27l5V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topNavBar\":\"AppWithRedux_topNavBar__24aDh\",\"containerTodo\":\"AppWithRedux_containerTodo__EEvC_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockNetTask\":\"addItemForm_blockNetTask__3lwFf\"};"],"sourceRoot":""}