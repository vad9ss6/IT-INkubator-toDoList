{"version":3,"sources":["serviceWorker.ts","components/usestyle.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","api/todolist-api.ts","components/TodoLists/Task/Task.tsx","state/tasks-reducer.ts","components/TodoLists/TodoList.tsx","state/todo-lists-reducer.ts","AppWithRedux.tsx","redux/redux-store.ts","index.tsx","components/TodoLists/TodoList.module.css","AppWithRedux.module.css","components/AddItemForm/addItemForm.module.css"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","theme","createStyles","rootPaper","width","color","backgroundColor","borderRadius","margin","rootBtn","marginBottom","closeBtn","padding","minWidth","rootBtnDelete","rootCheckBox","rootBtnGroup","textTransform","fontWeight","letterSpacing","rootInput","fontSize","borderBottom","borderBottomColor","borderColor","AddItemForm","React","memo","props","useState","newInputTitle","setNewInputTitle","error","setError","styleError","display","onClickHandler","trim","add","classes","className","s","blockNetTask","TextField","value","label","titleForm","onKeyPress","e","key","onChange","inputValue","currentTarget","Button","onClick","style","EditableSpan","TaskStatuses","TaskPriorities","editMode","setEditMode","title","setTitle","activateEditMode","autoFocus","onBlur","editTitleTask","idTaskTitle","idTodo","editTodoTitle","onDoubleClick","onTouchEnd","paddingLeft","instance","axios","create","baseURL","withCredentials","headers","todoListAPI","get","todoListTaskAPI","todoId","todolistId","taskId","delete","Task","id","status","styleCompletedTask","textDecoration","Completed","items","Checkbox","changeStatus","checked","New","inputProps","IconButton","aria-label","removeTask","initialState","TodoList","removeTodoList","addTask","filterTodo","dispatch","useDispatch","useEffect","getState","then","res","todoListId","data","type","filter","activeBtn","setActiveBtn","taskForTodoList","tasks","t","removeTodo","useCallback","onClickAllHandler","onClickActiveHandler","onClickCompletedHandler","Paper","headerPaper","titleContainer","titleBtn","listTask","map","ButtonGroup","fullWidth","variant","root","flexGrow","menuButton","marginRight","spacing","AppWithRedux","todoLists","useSelector","state","todoList","idTask","action","removeTaskAC","addTaskAC","changeStatusAC","newTitle","changeTaskTitleAC","RemoveTodoListAC","addTodo","acton","v1","activeTask","ChangeTodoListFilterAC","topNavBar","AppBar","position","Toolbar","edge","Typography","Container","fixed","containerTodo","Grid","container","justify","tl","allTodoListTasks","item","combineReducer","combineReducers","stateCopy","forEach","filteredTask","copyState","newTask","addedDate","deadline","description","order","priority","Middle","startDate","newTodoList","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.50d4b7f7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        rootPaper: {\r\n            width: '350px',\r\n            color: '#fff',\r\n            backgroundColor: \"rgba(13, 13, 13, 0.8)\",\r\n            borderRadius: '5px',\r\n            margin: '20px',\r\n        },\r\n        rootBtn: {\r\n            color: '#ffffff',\r\n            backgroundColor: '#AFB1B3',\r\n            borderRadius: '0 5px 5px 0',\r\n            marginBottom: '-12px',\r\n            '&:hover':{\r\n                backgroundColor: '#3F51B5',\r\n            }\r\n        },\r\n        closeBtn:{\r\n            color: '#ffffff',\r\n            padding: '0',\r\n            '&:hover':{\r\n                backgroundColor: 'transparent',\r\n                color: '#d4001b',\r\n            },\r\n            '&.MuiButton-root':{\r\n                minWidth: '10px',\r\n\r\n            }\r\n        },\r\n        rootBtnDelete: {\r\n            color: '#ffffff',\r\n            '&.MuiIconButton-root':{\r\n                color: '#afb1b3'\r\n            },\r\n            '&.MuiIconButton-root:hover': {\r\n                backgroundColor: 'rgb(15,28,81)'\r\n            }\r\n        },\r\n        rootCheckBox: {\r\n            '.MuiCheckbox-root&': {\r\n                padding: '10px',\r\n                color: '#fff',\r\n            },\r\n            '.Mui-checked&':{\r\n                color:'#0a00f5'\r\n            },\r\n            '&:hover':{\r\n                backgroundColor: 'rgba(10, 0, 245, 0.3)'\r\n            },\r\n            '.MuiCheckbox-colorSecondary&:hover':{\r\n                backgroundColor: 'rgba(10, 0, 245, 0.3)'\r\n            },\r\n\r\n        },\r\n        rootBtnGroup:{\r\n            borderRadius: '0',\r\n\r\n            textTransform: 'uppercase',\r\n            backgroundColor: '#595959',\r\n            '&:hover':{\r\n\r\n                backgroundColor: '#0a00f5',\r\n            },\r\n            '&.MuiButton-contained':{\r\n                color: 'black',\r\n                backgroundColor: '#0a00f5'\r\n            },\r\n            '&.MuiButton-root':{\r\n                fontWeight: 'bold',\r\n                letterSpacing: '2px',\r\n                color: '#fff'\r\n\r\n            }\r\n        },\r\n        rootInput:{\r\n            '& .MuiInputBase-root':{\r\n                color: '#fff',\r\n                fontSize: '16px'\r\n            },\r\n            '& .MuiInput-underline:before': {\r\n                borderBottom: '1px solid #fff'\r\n            },\r\n            '& .MuiInput-underline:hover:before': {\r\n                borderBottom: '1px solid #595959',\r\n\r\n            },\r\n            '& .MuiInput-formControl': {\r\n                color: '#fff',\r\n\r\n            },\r\n            '& .MuiInputLabel-formControl':{\r\n                color: '#fff',\r\n                fontSize: '16px'\r\n            },\r\n            '& label.Mui-focused': {\r\n                color: '#0a00f5',\r\n            },\r\n            '& .MuiInput-underline:after': {\r\n                borderBottomColor: '#0a00f5',\r\n            },\r\n            '& .MuiOutlinedInput-root': {\r\n                '& fieldset': {\r\n                    borderColor: '#595959',\r\n                },\r\n                '&:hover fieldset': {\r\n                    borderColor: '#0a00f5',\r\n                },\r\n                '&.Mui-focused fieldset': {\r\n                    borderColor: '#0a00f5',\r\n                },\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\nimport s from './addItemForm.module.css'\r\n\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport {useStyles} from \"../usestyle\";\r\n\r\ntype AddItemFormPropsType = {\r\n    titleForm: string\r\n    add: (title: string) => void\r\n}\r\n\r\n\r\nconst AddItemForm = React.memo(\r\n    (props: AddItemFormPropsType) => {\r\n        const [newInputTitle, setNewInputTitle] = useState<string>(\"\")\r\n        const [error, setError] = useState<boolean>(false)\r\n\r\n        const styleError = {\r\n            color: 'red',\r\n            display: error ? 'block' : 'none'\r\n        }\r\n\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            let inputValue = e.currentTarget.value\r\n            setNewInputTitle(inputValue)\r\n            if (inputValue) {\r\n                setError(false)\r\n            }\r\n        }\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if (e.key === 'Enter') {\r\n                onClickHandler()\r\n            }\r\n        }\r\n        const onClickHandler = () => {\r\n            if (newInputTitle.trim() !== '') {\r\n                props.add(newInputTitle.trim())\r\n                setNewInputTitle('')\r\n            } else {\r\n                setError(true)\r\n            }\r\n        }\r\n\r\n        const classes = useStyles()\r\n        return <div>\r\n            <div className={s.blockNetTask}>\r\n                <TextField\r\n                    error={error}\r\n                    value={newInputTitle}\r\n                    label={props.titleForm}\r\n                    className={classes.rootInput}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    onChange={onChangeHandler}\r\n                />\r\n                <Button onClick={onClickHandler} className={classes.rootBtn}>Add</Button>\r\n            </div>\r\n            <div style={styleError}>Please enter the task!</div>\r\n        </div>\r\n\r\n\r\n    }\r\n)\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropType = {\r\n    title: string\r\n    idTaskTitle: string\r\n    idTodo: string | ''\r\n    editTitleTask?:(value: string , id: string, idTodo: string) => void\r\n    editTodoTitle?:(value: string , id: string) => void\r\n}\r\n\r\n\r\n\r\nfunction EditableSpan(props:EditableSpanPropType) {\r\n    const [editMode,setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const changeTitle = (e:ChangeEvent<HTMLInputElement>) =>{\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n    const activateEditMode = () =>{\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () =>{\r\n        setEditMode(false)\r\n        props.editTitleTask && props.editTitleTask(title, props.idTaskTitle, props.idTodo)\r\n        props.editTodoTitle && props.editTodoTitle(title, props.idTodo)\r\n    }\r\n\r\n\r\n    return editMode\r\n        ? <input\r\n            style={{backgroundColor: 'black', color: 'white', width: '70%'}}\r\n            value={title} onChange={changeTitle}\r\n            autoFocus\r\n            onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode} onTouchEnd={activateEditMode} style={{paddingLeft: '5px'}}>{props.title}</span>\r\n}\r\n\r\nexport default EditableSpan","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers:{\r\n        'api-key': '6fc83ead-7a8f-46b1-893b-8465afa55caf'\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport const todoListAPI = {\r\n    getTodoList(){\r\n       return  instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    postTodoList(){\r\n       return instance.post<ResponseType<{item: TodolistType}>>('/todo-lists', {title: 'hello'})\r\n    },\r\n    deleteTodoList(){\r\n       return instance.delete<ResponseType>(`/todo-lists/{todolistId}`)\r\n    },\r\n    updateTodoList(){\r\n        let todolistId = '2d2ac26a-4902-437a-88c3-232573dfd1f9'\r\n        return instance.put<ResponseType>(`/todo-lists/${todolistId}`, {title: 'hi hey'})\r\n    }\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport const todoListTaskAPI = {\r\n    getTask(todoId: string){\r\n        return instance.get(`/todo-lists/${todoId}/tasks`)\r\n    },\r\n    postTask(){\r\n        let todolistId = '';\r\n        return instance.post(`/todo-lists/${todolistId}/tasks`, {title: 'beer'})\r\n    },\r\n    deleteTask(todolistId: string,taskId: string){\r\n        return instance.delete(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from \"../TodoList.module.css\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport EditableSpan from \"../../EditableSpan/EditableSpan\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {useStyles} from \"../../usestyle\";\r\nimport {TaskStatuses} from \"../../../api/todolist-api\";\r\n\r\n\r\ntype PropType = {\r\n    id: string\r\n    title: string\r\n    status: TaskStatuses\r\n    idTodo: string\r\n    editTitleTask: (value: string, id: string, idTodo: string) => void\r\n    changeStatus: (id: string, status: TaskStatuses, todoId: string) => void\r\n    removeTask: (id: string, todoListId: string) => void\r\n}\r\n\r\nexport const Task:React.FC<PropType> = ({id, title, status, idTodo, ...props}) => {\r\n    const classes = useStyles()\r\n    const onClickHandler = () => props.removeTask(id, idTodo)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStatus(id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, idTodo)\r\n\r\n    }\r\n    const styleCompletedTask = {\r\n        textDecoration: status === TaskStatuses.Completed ? 'line-through' : ''\r\n\r\n    }\r\n\r\n    return  <li key={id} style={styleCompletedTask} className={s.items}>\r\n        <div>\r\n            <Checkbox\r\n                onChange={onChangeHandler} checked={status === TaskStatuses.Completed} className={classes.rootCheckBox}  inputProps={{'aria-label': 'primary checkbox'}}\r\n            />\r\n            <EditableSpan title={title}\r\n                          editTitleTask={props.editTitleTask}\r\n                          idTaskTitle={id} idTodo={idTodo} />\r\n        </div>\r\n        <IconButton aria-label=\"delete\" className={classes.rootBtnDelete} onClick={onClickHandler}>\r\n            <DeleteIcon fontSize=\"large\" />\r\n        </IconButton>\r\n    </li>\r\n}","import {AddTodolistActionType, RemoveTodolistActionType, SetTodoListsActionType} from \"./todo-lists-reducer\";\r\nimport {v1} from \"uuid\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todoListTaskAPI} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {IGlobalState} from \"../redux/redux-store\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type removeTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    idTask: string\r\n    todoListId: string\r\n}\r\nexport type addTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type changeStatusType = {\r\n    type: 'CHANGE-STATUS'\r\n    idTask: string\r\n    status: TaskStatuses\r\n    todoListId: string\r\n}\r\nexport type changeTaskTitleType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    idTask: string\r\n    newTitle: string\r\n    todoListId: string\r\n}\r\nexport type setTasksType = {\r\n    type: 'SET-TASKS',\r\n    todoListId: string\r\n    items: Array<TaskType>\r\n}\r\n\r\ntype ActionType =\r\n    | removeTaskActionType\r\n    | addTaskActionType\r\n    | changeStatusType\r\n    | changeTaskTitleType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodoListsActionType\r\n    | setTasksType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TODO-LISTS': {\r\n            const stateCopy = {...state}\r\n            action.todoLists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            const filteredTask = state[action.todoListId].filter(t => t.id !== action.idTask)\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: filteredTask\r\n            }\r\n        }\r\n        case 'ADD-TASK': {\r\n            const copyState = {...state}\r\n            const newTask: TaskType =\r\n                {\r\n                    id: v1(),\r\n                    title: action.title,\r\n                    status: TaskStatuses.New,\r\n                    addedDate: '',\r\n                    deadline: '',\r\n                    description: '',\r\n                    order: 0,\r\n                    todoListId: action.todoListId,\r\n                    priority: TaskPriorities.Middle,\r\n                    startDate: ''\r\n                }\r\n            const todoList = state[action.todoListId]\r\n\r\n            copyState[action.todoListId] = [newTask, ...todoList]\r\n            return copyState\r\n        }\r\n        case 'CHANGE-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => {\r\n                    if (t.id === action.idTask) {\r\n                        return {...t, status: action.status}\r\n                    }\r\n                    return t\r\n                })\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t =>\r\n                    (t.id === action.idTask)\r\n                        ? {...t, title: action.newTitle}\r\n                        : t)\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const copyState = {...state}\r\n            copyState[action.todoListId] = []\r\n\r\n            return copyState\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case 'SET-TASKS': {\r\n            let copyState = {...state}\r\n            copyState[action.todoListId] = action.items\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (idTask: string, idTodo: string): removeTaskActionType => {\r\n    return {type: 'REMOVE-TASK', idTask, todoListId: idTodo}\r\n}\r\nexport const addTaskAC = (title: string, todoListId: string): addTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todoListId}\r\n}\r\nexport const changeStatusAC = (idTask: string, status: TaskStatuses, todoListId: string): changeStatusType => {\r\n    return {type: \"CHANGE-STATUS\", idTask, status, todoListId}\r\n}\r\nexport const changeTaskTitleAC = (newTitle: string, idTask: string, todoListId: string): changeTaskTitleType => {\r\n    return {type: 'CHANGE-TASK-TITLE', idTask, newTitle, todoListId}\r\n}\r\nexport const setTasksAC = (todoListId: string, items: Array<TaskType>): setTasksType => {\r\n    return {type: 'SET-TASKS', todoListId, items}\r\n}\r\n\r\n\r\nexport const setTasksTC = (todoId: string) => {\r\n    return (dispatch: Dispatch, getState: IGlobalState) => {\r\n        todoListTaskAPI.getTask(todoId)\r\n            .then(res => {\r\n                dispatch(setTasksAC(todoId, res.data.items))\r\n            })\r\n    }\r\n}\r\n\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport '../../App.css';\r\nimport s from './TodoList.module.css'\r\n\r\nimport AddItemForm from \"../AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"../EditableSpan/EditableSpan\";\r\nimport {Button, ButtonGroup, Paper} from \"@material-ui/core\";\r\n\r\nimport {useStyles} from \"../usestyle\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {FilterValuesType} from \"../../state/todo-lists-reducer\";\r\nimport {TaskStatuses, TaskType} from '../../api/todolist-api';\r\nimport {setTasksTC} from \"../../state/tasks-reducer\";\r\n\r\n\r\ntype ProtoType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (id: string, todoListId: string) => void\r\n    filterTodo: (activeTask: FilterValuesType, id: string) => void\r\n    addTask: (title: string, id: string) => void\r\n    changeStatus: (id: string, status: TaskStatuses, todoId: string) => void\r\n    removeTodoList: (id: string) => void\r\n    editTitleTask: (value: string, id: string, idTodo: string) => void\r\n    editTodoTitle: (value: string, id: string) => void\r\n}\r\n\r\n\r\n\r\nconst TodoList = React.memo<ProtoType>(({removeTodoList, id, addTask, filterTodo, ...props}) => {\r\n    let dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(setTasksTC(id))\r\n    },[])\r\n    const [activeBtn, setActiveBtn] = useState<FilterValuesType>(props.filter)\r\n\r\n    let taskForTodoList = props.tasks\r\n\r\n    if (props.filter === 'completed') {\r\n        taskForTodoList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    if (props.filter === 'active') {\r\n        taskForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    const classes = useStyles()\r\n    // const task = taskForTodoList.map(t => {\r\n    //     const onClickHandler = () => props.removeTask(t.id, id)\r\n    //     const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    //         props.changeStatus(t.id, e.currentTarget.checked, id)\r\n    //\r\n    //     }\r\n    //     const styleCompletedTask = {\r\n    //         textDecoration: t.isDone ? 'line-through' : ''\r\n    //\r\n    //     }\r\n    //     return <li key={t.id} style={styleCompletedTask} className={s.items}>\r\n    //         <div>\r\n    //             <Checkbox\r\n    //                 onChange={onChangeHandler} checked={t.isDone} className={classes.rootCheckBox}  inputProps={{'aria-label': 'primary checkbox'}}\r\n    //             />\r\n    //             <EditableSpan title={t.title}\r\n    //                           editTitleTask={props.editTitleTask}\r\n    //                           idTaskTitle={t.id} idTodo={id} />\r\n    //         </div>\r\n    //         <IconButton aria-label=\"delete\" className={classes.rootBtnDelete} onClick={onClickHandler}>\r\n    //             <DeleteIcon fontSize=\"large\" />\r\n    //         </IconButton>\r\n    //     </li>\r\n    //\r\n    // })\r\n\r\n    const removeTodo = useCallback(() => {\r\n        removeTodoList(id)\r\n    }, [removeTodoList, id])\r\n    const onClickHandler = useCallback((title: string) => {\r\n        addTask(title, id)\r\n    }, [addTask, id])\r\n    const onClickAllHandler = useCallback(() => {\r\n        filterTodo('all', id)\r\n        setActiveBtn('all')\r\n    }, [filterTodo, id])\r\n    const onClickActiveHandler = useCallback(() => {\r\n        filterTodo('active', id)\r\n        setActiveBtn('active')\r\n    }, [filterTodo, id])\r\n    const onClickCompletedHandler = useCallback(() => {\r\n        filterTodo('completed', id)\r\n        setActiveBtn('completed')\r\n    }, [filterTodo, id])\r\n\r\n    return (\r\n        <Paper className={classes.rootPaper}>\r\n            <div className={s.headerPaper}>\r\n                <div className={s.titleContainer}>\r\n                    <EditableSpan title={props.title} idTodo={id} editTitleTask={props.editTodoTitle} idTaskTitle={id}/>\r\n                    <div className={s.titleBtn}>\r\n                        <Button onClick={removeTodo} className={classes.closeBtn}>x</Button>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <AddItemForm add={onClickHandler} titleForm={'Set a task'}/>\r\n                </div>\r\n            </div>\r\n            <ul className={s.listTask}>\r\n                {/*{(taskForTodoList.length) ? task : <strong>no task</strong>}*/}\r\n                {taskForTodoList.map(t => <Task id={t.id}\r\n                                                key={t.id}\r\n                                                title={t.title}\r\n                                                status={t.status}\r\n                                                idTodo={id}\r\n                                                changeStatus={props.changeStatus}\r\n                                                removeTask={props.removeTask}\r\n                                                editTitleTask={props.editTitleTask}/>\r\n                )}\r\n\r\n            </ul>\r\n            <div>\r\n                <ButtonGroup fullWidth={true}>\r\n                    <Button className={classes.rootBtnGroup} variant={activeBtn === 'all' ? 'contained' : 'outlined'}\r\n                            onClick={onClickAllHandler}>All</Button>\r\n                    <Button className={classes.rootBtnGroup} variant={activeBtn === 'active' ? 'contained' : 'outlined'}\r\n                            onClick={onClickActiveHandler}>Active</Button>\r\n                    <Button className={classes.rootBtnGroup}\r\n                            variant={activeBtn === 'completed' ? 'contained' : 'outlined'}\r\n                            onClick={onClickCompletedHandler}>Completed</Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </Paper>\r\n    )\r\n})\r\n\r\nexport default TodoList;","import {v1} from \"uuid\";\r\nimport {todoListAPI, TodolistType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type SetTodoListsActionType = {\r\n    type: 'SET-TODO-LISTS',\r\n    todoLists: Array<TodolistType>\r\n}\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodoListsActionType\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodoListDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todoListsReducer = (state: Array<TodoListDomainType> = initialState, action: ActionType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODO-LISTS': {\r\n            return action.todoLists.map(tl => ({\r\n                ...tl,\r\n                filter: \"all\"\r\n            }))\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(t => t.id !== action.id);\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const newTodoList: TodoListDomainType = {id: action.todoListId, title: action.title, filter: \"all\", addedDate: '', order: 0}\r\n            return [\r\n                ...state,\r\n                newTodoList\r\n            ]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(t => {\r\n                if (t.id === action.id) {\r\n                    t.title = action.title\r\n                }\r\n                return t\r\n            })\r\n\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(t => {\r\n                if (t.id === action.id) {\r\n                    t.filter = action.filter\r\n                }\r\n                return t\r\n\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetTodoListsAC = (todoLists: Array<TodolistType>): SetTodoListsActionType => {\r\n    return {type: \"SET-TODO-LISTS\", todoLists}\r\n}\r\n\r\nexport const RemoveTodoListAC = (todoListId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todoListId}\r\n}\r\nexport const AddTodoListAC = (newTodoListTitle: string): AddTodolistActionType => {\r\n    return {type: \"ADD-TODOLIST\", title: newTodoListTitle, todoListId: v1()}\r\n}\r\nexport const ChangeTodoListTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id, title}\r\n}\r\nexport const ChangeTodoListFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id, filter}\r\n}\r\n\r\nexport const fetchTodoLists = () => {\r\n    return (dispatch: Dispatch) => {\r\n        todoListAPI.getTodoList()\r\n            .then((res) => {\r\n                dispatch(SetTodoListsAC(res.data))\r\n            })\r\n    }\r\n}\r\n\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport s from './AppWithRedux.module.css'\r\nimport TodoList from \"./components/TodoLists/TodoList\";\r\nimport AddItemForm from \"./components/AddItemForm/AddItemForm\";\r\nimport { AppBar, Button, Container, createStyles, Grid, Theme, Toolbar, Typography } from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {\r\n    AddTodoListAC,\r\n    ChangeTodoListFilterAC,\r\n    ChangeTodoListTitleAC, fetchTodoLists, FilterValuesType,\r\n    RemoveTodoListAC, SetTodoListsAC, TodoListDomainType\r\n} from \"./state/todo-lists-reducer\";\r\nimport {addTaskAC, changeStatusAC, changeTaskTitleAC, removeTaskAC, TasksStateType} from \"./state/tasks-reducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {TaskStatuses, todoListAPI, todoListTaskAPI} from './api/todolist-api';\r\nimport {IGlobalState} from \"./redux/redux-store\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles(\r\n    {\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    })\r\n);\r\n\r\n\r\n\r\nfunction AppWithRedux() {\r\n    useEffect(() =>{\r\n        dispatch(fetchTodoLists())\r\n    },[])\r\n\r\n    const todoLists = useSelector<IGlobalState, Array<TodoListDomainType>>(state => state.todoList)\r\n    const tasks = useSelector<IGlobalState, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((idTask: string, idTodo: string) => {\r\n        todoListTaskAPI.deleteTask(idTodo, idTask).then(res =>{\r\n            const action = removeTaskAC(idTask, idTodo)\r\n            dispatch(action)\r\n        })\r\n\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, idTodo: string) => {\r\n        const action = addTaskAC(title, idTodo)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((idTask: string, status: TaskStatuses, todoListId: string) => {\r\n        const action = changeStatusAC(idTask, status, todoListId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const editTitleTask = useCallback((idTask: string, newTitle: string, todoListId: string) => {\r\n        const action = changeTaskTitleAC(idTask, newTitle, todoListId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const removeTodoList = useCallback((todoListId: string) => {\r\n        const action = RemoveTodoListAC(todoListId)\r\n        dispatch(action)\r\n\r\n    }, [dispatch])\r\n    const addTodo = useCallback((title: string) => {\r\n        const acton = AddTodoListAC(title)\r\n        dispatch(acton)\r\n    }, [dispatch])\r\n    const filterTodo = useCallback((activeTask: FilterValuesType, id: string) => {\r\n        const action = ChangeTodoListFilterAC(id, activeTask)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const editTodoTitle = useCallback((newTitle: string, todoListId: string) => {\r\n        const action = ChangeTodoListTitleAC(todoListId, newTitle)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <>\r\n            <div className={s.topNavBar}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            News\r\n                        </Typography>\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n            <Container fixed className={s.containerTodo}>\r\n                <Grid container justify=\"center\"  >\r\n                    <AddItemForm add={addTodo} titleForm={'Add Todo list'}/>\r\n                </Grid>\r\n                <Grid container spacing={1} justify=\"space-around\" >\r\n                    {\r\n                        todoLists.map(tl => {\r\n                            let allTodoListTasks = tasks[tl.id]\r\n                            return <Grid item key={tl.id}>\r\n                                <TodoList\r\n                                    id={tl.id}\r\n                                    key={tl.id}\r\n                                    title={tl.title}\r\n                                    addTask={addTask}\r\n                                    filter={tl.filter}\r\n                                    removeTask={removeTask}\r\n                                    filterTodo={filterTodo}\r\n                                    tasks={allTodoListTasks}\r\n                                    changeStatus={changeStatus}\r\n                                    editTitleTask={editTitleTask}\r\n                                    editTodoTitle={editTodoTitle}\r\n                                    removeTodoList={removeTodoList}\r\n                                />\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\nexport default AppWithRedux;\r\n\r\n\r\n\r\n\r\n","import {createStore, combineReducers, applyMiddleware} from \"redux\";\r\nimport {tasksReducer} from \"../state/tasks-reducer\";\r\nimport {todoListsReducer} from \"../state/todo-lists-reducer\";\r\nimport thunk from 'redux-thunk'\r\n\r\nconst combineReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoList: todoListsReducer\r\n})\r\n\r\nexport type IGlobalState = ReturnType<typeof combineReducer>;\r\n\r\n//@ts-ignore window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\nexport const store = createStore(combineReducer, applyMiddleware(thunk))\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {store} from \"./redux/redux-store\"\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerPaper\":\"TodoList_headerPaper__3n7kF\",\"titleContainer\":\"TodoList_titleContainer__2xUaK\",\"titleBtn\":\"TodoList_titleBtn__2EK1K\",\"listTask\":\"TodoList_listTask__HFzED\",\"items\":\"TodoList_items__27l5V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topNavBar\":\"AppWithRedux_topNavBar__24aDh\",\"containerTodo\":\"AppWithRedux_containerTodo__EEvC_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockNetTask\":\"addItemForm_blockNetTask__3lwFf\"};"],"sourceRoot":""}